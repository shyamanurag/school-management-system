# Generated by Django 5.0.6 on 2025-06-24 17:28

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0003_feecategory_exam_grade_feestructure_student_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AdvancedReport',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('category', models.CharField(choices=[('ACADEMIC', 'Academic Performance'), ('FINANCIAL', 'Financial Analysis'), ('ATTENDANCE', 'Attendance Analytics'), ('BEHAVIORAL', 'Behavioral Analysis'), ('OPERATIONAL', 'Operational Efficiency'), ('PREDICTIVE', 'Predictive Analytics'), ('COMPARATIVE', 'Comparative Analysis'), ('CUSTOM', 'Custom Report')], max_length=20)),
                ('filters', models.JSONField(default=dict)),
                ('parameters', models.JSONField(default=dict)),
                ('data_sources', models.JSONField(default=list)),
                ('format', models.CharField(choices=[('PDF', 'PDF Document'), ('EXCEL', 'Excel Spreadsheet'), ('CSV', 'CSV File'), ('JSON', 'JSON Data'), ('DASHBOARD', 'Interactive Dashboard'), ('PRESENTATION', 'PowerPoint Presentation')], default='PDF', max_length=20)),
                ('template', models.CharField(blank=True, max_length=100, null=True)),
                ('is_scheduled', models.BooleanField(default=False)),
                ('schedule_expression', models.CharField(blank=True, max_length=100, null=True)),
                ('next_run', models.DateTimeField(blank=True, null=True)),
                ('recipient_groups', models.JSONField(default=list)),
                ('use_ai_insights', models.BooleanField(default=False)),
                ('ai_analysis_level', models.CharField(choices=[('BASIC', 'Basic Analysis'), ('ADVANCED', 'Advanced Analysis'), ('PREDICTIVE', 'Predictive Analysis'), ('PRESCRIPTIVE', 'Prescriptive Analysis')], default='BASIC', max_length=20)),
                ('last_generated', models.DateTimeField(blank=True, null=True)),
                ('generation_count', models.IntegerField(default=0)),
                ('average_generation_time', models.FloatField(default=0.0)),
                ('recipients', models.ManyToManyField(blank=True, related_name='subscribed_reports', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Advanced Report',
                'verbose_name_plural': 'Advanced Reports',
            },
        ),
        migrations.CreateModel(
            name='AIAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('analysis_type', models.CharField(choices=[('STUDENT_PERFORMANCE', 'Student Performance Analysis'), ('ATTENDANCE_PREDICTION', 'Attendance Prediction'), ('FEE_COLLECTION_FORECAST', 'Fee Collection Forecast'), ('TEACHER_WORKLOAD', 'Teacher Workload Analysis'), ('RESOURCE_OPTIMIZATION', 'Resource Optimization'), ('BEHAVIORAL_ANALYSIS', 'Student Behavioral Analysis'), ('ACADEMIC_RISK', 'Academic Risk Assessment'), ('PARENT_ENGAGEMENT', 'Parent Engagement Analysis')], max_length=30)),
                ('analysis_data', models.JSONField(default=dict)),
                ('insights', models.JSONField(default=dict)),
                ('recommendations', models.JSONField(default=list)),
                ('confidence_score', models.FloatField(default=0.0)),
                ('is_automated', models.BooleanField(default=True)),
                ('next_analysis_date', models.DateTimeField(blank=True, null=True)),
                ('target_grade', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.grade')),
                ('target_student', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.student')),
            ],
            options={
                'verbose_name': 'AI Analytics',
                'verbose_name_plural': 'AI Analytics',
            },
        ),
        migrations.CreateModel(
            name='MobileAppSession',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('app_type', models.CharField(choices=[('PARENT', 'Parent App'), ('STUDENT', 'Student App'), ('TEACHER', 'Teacher App'), ('ADMIN', 'Admin App')], max_length=10)),
                ('device_info', models.JSONField(default=dict)),
                ('app_version', models.CharField(max_length=20)),
                ('os_version', models.CharField(max_length=50)),
                ('device_token', models.CharField(max_length=255, unique=True)),
                ('session_start', models.DateTimeField(auto_now_add=True)),
                ('session_end', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('last_latitude', models.FloatField(blank=True, null=True)),
                ('last_longitude', models.FloatField(blank=True, null=True)),
                ('location_updated_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mobile_sessions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Mobile App Session',
                'verbose_name_plural': 'Mobile App Sessions',
            },
        ),
        migrations.CreateModel(
            name='ParentPortal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('dashboard_layout', models.JSONField(default=dict)),
                ('notification_preferences', models.JSONField(default=dict)),
                ('privacy_settings', models.JSONField(default=dict)),
                ('device_tokens', models.JSONField(default=list)),
                ('app_version', models.CharField(blank=True, max_length=20, null=True)),
                ('last_app_login', models.DateTimeField(blank=True, null=True)),
                ('preferred_communication_method', models.CharField(choices=[('EMAIL', 'Email'), ('SMS', 'SMS'), ('PUSH', 'Push Notification'), ('WHATSAPP', 'WhatsApp'), ('IN_APP', 'In-App Only')], default='EMAIL', max_length=20)),
                ('emergency_contacts', models.JSONField(default=list)),
                ('login_count', models.IntegerField(default=0)),
                ('last_activity', models.DateTimeField(blank=True, null=True)),
                ('feature_usage_stats', models.JSONField(default=dict)),
                ('parent_user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='parent_portal', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Parent Portal',
                'verbose_name_plural': 'Parent Portals',
            },
        ),
        migrations.CreateModel(
            name='RealTimeChat',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('chat_type', models.CharField(choices=[('DIRECT', 'Direct Message'), ('GROUP', 'Group Chat'), ('CLASS_GROUP', 'Class Group'), ('TEACHER_PARENT', 'Teacher-Parent'), ('STUDENT_TEACHER', 'Student-Teacher'), ('PARENT_ADMIN', 'Parent-Admin'), ('EMERGENCY', 'Emergency Chat')], max_length=20)),
                ('name', models.CharField(blank=True, max_length=200, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('is_group', models.BooleanField(default=False)),
                ('max_participants', models.IntegerField(default=50)),
                ('allow_file_sharing', models.BooleanField(default=True)),
                ('allow_voice_messages', models.BooleanField(default=True)),
                ('is_moderated', models.BooleanField(default=False)),
                ('is_private', models.BooleanField(default=True)),
                ('is_archived', models.BooleanField(default=False)),
                ('archived_at', models.DateTimeField(blank=True, null=True)),
                ('last_message_at', models.DateTimeField(blank=True, null=True)),
                ('message_count', models.IntegerField(default=0)),
                ('admin_users', models.ManyToManyField(blank=True, related_name='admin_chat_rooms', to=settings.AUTH_USER_MODEL)),
                ('participants', models.ManyToManyField(related_name='chat_rooms', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-last_message_at'],
            },
        ),
        migrations.CreateModel(
            name='ChatMessage',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('message_type', models.CharField(choices=[('TEXT', 'Text'), ('IMAGE', 'Image'), ('FILE', 'File'), ('VOICE', 'Voice Message'), ('VIDEO', 'Video'), ('LOCATION', 'Location'), ('SYSTEM', 'System Message')], default='TEXT', max_length=10)),
                ('content', models.TextField(blank=True, null=True)),
                ('attachment', models.FileField(blank=True, null=True, upload_to='chat_attachments/')),
                ('thumbnail', models.ImageField(blank=True, null=True, upload_to='chat_thumbnails/')),
                ('is_edited', models.BooleanField(default=False)),
                ('edited_at', models.DateTimeField(blank=True, null=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('reactions', models.JSONField(default=dict)),
                ('reply_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='core.chatmessage')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_chat_messages', to=settings.AUTH_USER_MODEL)),
                ('chat_room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='core.realtimechat')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='SmartNotification',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('trigger_type', models.CharField(choices=[('ACADEMIC_ALERT', 'Academic Performance Alert'), ('ATTENDANCE_WARNING', 'Attendance Warning'), ('FEE_REMINDER', 'Fee Payment Reminder'), ('EXAM_PREPARATION', 'Exam Preparation Reminder'), ('BEHAVIORAL_CONCERN', 'Behavioral Concern'), ('ACHIEVEMENT_RECOGNITION', 'Achievement Recognition'), ('PARENT_MEETING', 'Parent Meeting Request'), ('CUSTOM_TRIGGER', 'Custom Trigger')], max_length=30)),
                ('title', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('action_items', models.JSONField(default=list)),
                ('priority_score', models.FloatField(default=0.5)),
                ('preferred_channels', models.JSONField(default=list)),
                ('delivery_time_preference', models.CharField(choices=[('IMMEDIATE', 'Immediate'), ('MORNING', 'Morning (8-10 AM)'), ('AFTERNOON', 'Afternoon (1-3 PM)'), ('EVENING', 'Evening (6-8 PM)'), ('WEEKEND', 'Weekend Only')], default='IMMEDIATE', max_length=20)),
                ('personalization_data', models.JSONField(default=dict)),
                ('language_preference', models.CharField(default='en', max_length=10)),
                ('is_sent', models.BooleanField(default=False)),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('is_read', models.BooleanField(default=False)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('is_acted_upon', models.BooleanField(default=False)),
                ('action_taken_at', models.DateTimeField(blank=True, null=True)),
                ('effectiveness_score', models.FloatField(blank=True, null=True)),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='smart_notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Smart Notification',
                'verbose_name_plural': 'Smart Notifications',
                'ordering': ['-priority_score', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='VirtualClassroom',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('class_type', models.CharField(choices=[('LIVE_LECTURE', 'Live Lecture'), ('TUTORIAL', 'Tutorial Session'), ('EXAM', 'Online Exam'), ('PARENT_MEETING', 'Parent-Teacher Meeting'), ('STAFF_MEETING', 'Staff Meeting'), ('WEBINAR', 'Webinar')], max_length=20)),
                ('platform', models.CharField(choices=[('ZOOM', 'Zoom'), ('GOOGLE_MEET', 'Google Meet'), ('MICROSOFT_TEAMS', 'Microsoft Teams'), ('WEBEX', 'Cisco Webex'), ('CUSTOM', 'Custom Platform')], max_length=20)),
                ('meeting_id', models.CharField(max_length=100)),
                ('meeting_password', models.CharField(blank=True, max_length=50, null=True)),
                ('meeting_url', models.URLField()),
                ('scheduled_start', models.DateTimeField()),
                ('scheduled_end', models.DateTimeField()),
                ('actual_start', models.DateTimeField(blank=True, null=True)),
                ('actual_end', models.DateTimeField(blank=True, null=True)),
                ('max_participants', models.IntegerField(default=100)),
                ('is_recorded', models.BooleanField(default=False)),
                ('recording_url', models.URLField(blank=True, null=True)),
                ('allow_chat', models.BooleanField(default=True)),
                ('allow_screen_sharing', models.BooleanField(default=True)),
                ('require_approval', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('is_recurring', models.BooleanField(default=False)),
                ('recurrence_pattern', models.JSONField(blank=True, default=dict, null=True)),
                ('host', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hosted_virtual_classes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Virtual Classroom',
                'verbose_name_plural': 'Virtual Classrooms',
                'ordering': ['scheduled_start'],
            },
        ),
        migrations.CreateModel(
            name='VirtualClassroomParticipant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('role', models.CharField(choices=[('HOST', 'Host'), ('CO_HOST', 'Co-Host'), ('PRESENTER', 'Presenter'), ('PARTICIPANT', 'Participant'), ('OBSERVER', 'Observer')], default='PARTICIPANT', max_length=15)),
                ('joined_at', models.DateTimeField(blank=True, null=True)),
                ('left_at', models.DateTimeField(blank=True, null=True)),
                ('total_duration', models.DurationField(blank=True, null=True)),
                ('chat_messages_count', models.IntegerField(default=0)),
                ('questions_asked', models.IntegerField(default=0)),
                ('screen_share_duration', models.DurationField(blank=True, null=True)),
                ('attendance_status', models.CharField(choices=[('PRESENT', 'Present'), ('ABSENT', 'Absent'), ('LATE', 'Late'), ('LEFT_EARLY', 'Left Early'), ('TECHNICAL_ISSUES', 'Technical Issues')], default='ABSENT', max_length=20)),
                ('session_rating', models.IntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], null=True)),
                ('feedback', models.TextField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='virtual_class_participations', to=settings.AUTH_USER_MODEL)),
                ('virtual_classroom', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participant_records', to='core.virtualclassroom')),
            ],
            options={
                'verbose_name': 'Virtual Classroom Participant',
                'verbose_name_plural': 'Virtual Classroom Participants',
                'unique_together': {('virtual_classroom', 'user')},
            },
        ),
        migrations.AddField(
            model_name='virtualclassroom',
            name='participants',
            field=models.ManyToManyField(related_name='virtual_classes', through='core.VirtualClassroomParticipant', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='BiometricAttendance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('biometric_type', models.CharField(choices=[('FINGERPRINT', 'Fingerprint'), ('FACE_RECOGNITION', 'Face Recognition'), ('IRIS_SCAN', 'Iris Scan'), ('PALM_PRINT', 'Palm Print'), ('VOICE_RECOGNITION', 'Voice Recognition')], max_length=20)),
                ('biometric_template', models.BinaryField()),
                ('template_quality', models.FloatField(default=0.0)),
                ('enrollment_device', models.CharField(max_length=100)),
                ('enrollment_location', models.CharField(blank=True, max_length=100, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_primary', models.BooleanField(default=False)),
                ('last_used', models.DateTimeField(blank=True, null=True)),
                ('usage_count', models.IntegerField(default=0)),
                ('enrollment_verified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_biometrics', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='biometric_data', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Biometric Attendance',
                'verbose_name_plural': 'Biometric Attendance Records',
                'unique_together': {('user', 'biometric_type', 'is_primary')},
            },
        ),
    ]
